class CoursesController < ApplicationController
  before_action :set_course, only: [:show, :edit, :update, :destroy]

  # This controller handle a scaffold of action.
  # no additional method added except error handling

  # GET /courses
  # GET /courses.json
  def index #this actio print all entity
    begin # Error handling
      @courses = Course.all
    rescue Exception => errMsg # interrogate a rescured exception
      puts errMsg # displya system generated error message
    end # end erro handling
  end #END index()

  # GET /courses/1
  # GET /courses/1.json
  # this action show single entity
  def show
  end #END show()

  # GET /courses/new
  def new #This actio allow admin to create new course
    begin # erro handing
      @course = Course.new
    rescue Exception => errMsg # interrogate a rescured exception
      puts errMsg #display system error message
    end #end error handling
  end #end new

  # GET /courses/1/edit
  def edit #this action allow admin to edit single course value
  end

  # POST /courses
  # POST /courses.json
  def create # simply create new course
    begin #error handing
      @course = Course.new(course_params)

      respond_to do |format|
        if @course.save
          format.html { redirect_to @course, notice: 'Course was successfully created.' }
          format.json { render :show, status: :created, location: @course }
        else
          format.html { render :new }
          format.json { render json: @course.errors, status: :unprocessable_entity }
        end #end if
      end #end do
    rescue Exception => errMsg # interrogate a rescured exception
      puts errMsg #dislpay error message generated by system
    end# end error handling
  end #end create

  # PATCH/PUT /courses/1
  # PATCH/PUT /courses/1.json
  #this actio is part of the update a single course
  def update
    begin # error handling
      respond_to do |format|
        if @course.update(course_params)
          format.html { redirect_to @course, notice: 'Course was successfully updated.' }
          format.json { render :show, status: :ok, location: @course }
        else
          format.html { render :edit }
          format.json { render json: @course.errors, status: :unprocessable_entity }
        end #end if
      end #end do
    rescue Exception => errMsg # interrogate a rescured exception
      puts errMsg #print system error message
    end #end rescue
  end#end update

  # DELETE /courses/1
  # DELETE /courses/1.json
  def destroy # simply delete single course
    begin
      @course.destroy
      respond_to do |format|
        format.html { redirect_to courses_url, notice: 'Course was successfully destroyed.' }
        format.json { head :no_content }
      end #end do
    rescue Exception => msgErr # interrogate a rescured exception
      puts msgErr #print error message
    end #end rescue
  end # end destroy

  private
    # Use callbacks to share common setup or constraints between actions.
    def set_course
      @course = Course.find(params[:id])
    end

    # Never trust parameters from the scary internet, only allow the white list through.
    def course_params
      params.require(:course).permit(:course_name, :course_code, :stream, :description)
    end
end
